// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Encrypt
RawVector Encrypt(RawVector input, CharacterVector passwd, uint32_t maxmem = 0, double maxmemfrac = 0.1, double maxtime = 1.0);
RcppExport SEXP scrypt_Encrypt(SEXP inputSEXP, SEXP passwdSEXP, SEXP maxmemSEXP, SEXP maxmemfracSEXP, SEXP maxtimeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawVector >::type input(inputSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type passwd(passwdSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type maxmem(maxmemSEXP );
        Rcpp::traits::input_parameter< double >::type maxmemfrac(maxmemfracSEXP );
        Rcpp::traits::input_parameter< double >::type maxtime(maxtimeSEXP );
        RawVector __result = Encrypt(input, passwd, maxmem, maxmemfrac, maxtime);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Decrypt
RawVector Decrypt(RawVector input, CharacterVector passwd);
RcppExport SEXP scrypt_Decrypt(SEXP inputSEXP, SEXP passwdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawVector >::type input(inputSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type passwd(passwdSEXP );
        RawVector __result = Decrypt(input, passwd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// HashPassword
CharacterVector HashPassword(CharacterVector passwd, uint32_t maxmem = 0, double maxmemfrac = 0.1, double maxtime = 1.0);
RcppExport SEXP scrypt_HashPassword(SEXP passwdSEXP, SEXP maxmemSEXP, SEXP maxmemfracSEXP, SEXP maxtimeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type passwd(passwdSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type maxmem(maxmemSEXP );
        Rcpp::traits::input_parameter< double >::type maxmemfrac(maxmemfracSEXP );
        Rcpp::traits::input_parameter< double >::type maxtime(maxtimeSEXP );
        CharacterVector __result = HashPassword(passwd, maxmem, maxmemfrac, maxtime);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// VerifyPassword
bool VerifyPassword(CharacterVector hash, CharacterVector passwd);
RcppExport SEXP scrypt_VerifyPassword(SEXP hashSEXP, SEXP passwdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type hash(hashSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type passwd(passwdSEXP );
        bool __result = VerifyPassword(hash, passwd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Crypt
RawVector Crypt(RawVector passwd, RawVector salt, uint32_t n, uint32_t r, uint32_t p, uint32_t length = 64);
RcppExport SEXP scrypt_Crypt(SEXP passwdSEXP, SEXP saltSEXP, SEXP nSEXP, SEXP rSEXP, SEXP pSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawVector >::type passwd(passwdSEXP );
        Rcpp::traits::input_parameter< RawVector >::type salt(saltSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type n(nSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type r(rSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type p(pSEXP );
        Rcpp::traits::input_parameter< uint32_t >::type length(lengthSEXP );
        RawVector __result = Crypt(passwd, salt, n, r, p, length);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
